apiVersion: apps/v1
kind: Deployment
metadata:
  name: service_name
  namespace: qubide
  labels:
    app: service_name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service_name
  template:
    metadata:
      namespace: qubide
      labels:
        app: service_name
    spec:
      volumes:
        - name: workspace-volume
          emptyDir: {}
      initContainers:
        - name: copy-minio-resources
          image: minio/mc
          command: ["sh", "-c"]
          args:
            - |
              set -e
              # Use service DNS, not localhost
              mc alias set minio http://minio.minio-dev.svc.cluster.local:9000 "$MINIO_ACCESS_KEY" "$MINIO_SECRET_KEY" && mc cp --recursive minio/cloud-ide/projects/service_name/ /workspace/
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: MINIO_ACCESS_KEY
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: MINIO_SECRET_KEY
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
      containers:
        - name: runner
          image: prakashbanjade/cloud-ide-runner:latest
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: MINIO_ACCESS_KEY
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: MINIO_SECRET_KEY
            - name: MINIO_ENDPOINT
              value: minio.minio-dev.svc.cluster.local
            - name: MINIO_PORT
              value: "9000"
          ports:
            - containerPort: 3003 # expose ws port
            - containerPort: 3000 # expose the port where the application might run on. eg: a node app running on port 3000
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
          resources:
            # Bounty $25 Use ephemeral-storage to add space limits here
            requests:
              cpu: "1"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "1Gi"

---
apiVersion: v1
kind: Service
metadata:
  name: service_name
  namespace: qubide
spec:
  selector:
    app: service_name
  ports:
    - protocol: TCP
      name: ws
      port: 3003
      targetPort: 3003
    - protocol: TCP
      name: user
      port: 3000
      targetPort: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: service_name
  namespace: qubide
spec:
  ingressClassName: nginx
  rules:
    - host: service_name.runner.com # ws endpoint
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service_name
                port:
                  number: 3003
    - host: service_name.node-app.com # node/python app endpoint
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service_name
                port:
                  number: 3000
