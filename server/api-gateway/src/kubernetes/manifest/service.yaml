apiVersion: apps/v1
kind: Deployment
metadata:
  name: service_name
  namespace: qubide
  labels:
    app: service_name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service_name
  template:
    metadata:
      namespace: qubide
      labels:
        app: service_name
    spec:
      volumes:
        - name: workspace-volume
          emptyDir: {}

      initContainers:
        - name: copy-minio-resources
          image: minio/mc
          command: ["sh", "-c"]
          args:
            - |
              set -e
              mc alias set minio http://minio.minio-dev.svc.cluster.local:9000 "$MINIO_ACCESS_KEY" "$MINIO_SECRET_KEY" && mc cp --recursive minio/cloud-ide/code/service_name/ /workspace/
          envFrom:
            - secretRef:
                name: runner-env
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
      serviceAccountName: runner-sa

      containers:
        - name: pty
          image: prakashbanjade/cloud-ide-pty:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
          env:
            - name: CLIENT_URL
              valueFrom:
                secretKeyRef:
                  name: runner-env
                  key: CLIENT_URL
            - name: REPL_ID
              value: "service_name"
            - name: LANG
              value: "PROJ_LANG" # will be replace with the actual language, e.g. "java", "python", etc.
          lifecycle:
            postStart:
              exec:
                command:
                  - sh
                  - -c
                  - |
                    set -e

                    # If Node project, install deps
                    if [ -f /workspace/package.json ] && [ ! -d /workspace/node_modules ]; then
                      echo "Installing npm dependencies…"
                      cd /workspace
                      npm install
                    fi

                    # If Java project, install JDK
                    if [ "$LANG" = "java" ]; then
                      echo "Installing JDK for Java project…"
                      apt-get update \
                        && DEBIAN_FRONTEND=noninteractive apt-get install -y default-jdk \
                        && rm -rf /var/lib/apt/lists/*
                    fi
          ports:
            - containerPort: 3004 # ws for terminal
            - containerPort: LANG_PORT # expose the port where the application might run on. eg: a node app running on port 3000
          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
              ephemeral-storage: "2Gi"
            limits:
              cpu: "500m"
              memory: "1Gi"
              ephemeral-storage: "5Gi"
      
        - name: runner
          image: prakashbanjade/cloud-ide-runner:latest
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: runner-env
          env:
            - name: REPL_ID
              value: "service_name"
          ports:
            - containerPort: 3003 # ws for runner
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
              ephemeral-storage: "2Gi"
            limits:
              cpu: "300m"
              memory: "1Gi"
              ephemeral-storage: "3Gi"

---
apiVersion: v1
kind: Service
metadata:
  name: service_name
  namespace: qubide
spec:
  selector:
    app: service_name
  ports:
    - protocol: TCP
      name: ws-pty
      port: 3004
      targetPort: 3004
    - protocol: TCP
      name: ws-runner
      port: 3003
      targetPort: 3003
    - protocol: TCP
      name: user-app
      port: LANG_PORT
      targetPort: LANG_PORT
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: service_name
  namespace: qubide
  annotations:
    kubernetes.io/ingress.class: "nginx" # Use the NGINX Ingress controller
    cert-manager.io/cluster-issuer: "letsencrypt-prod" # Tell cert‑manager which ClusterIssuer to use

    # Redirect all HTTP traffic to HTTPS
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: nginx

  # Terminate TLS for both hostnames into one Kubernetes Secret
  tls:
    - hosts:
        - pty.service_name.prakashbanjade.com
        - service_name.prakashbanjade.com
        - service_name.qubide.cloud
      secretName: service_name-tls

  rules:
    - host: pty.service_name.prakashbanjade.com # ws for pty
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service_name
                port:
                  number: 3004
  
    - host: service_name.prakashbanjade.com # ws for runner
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service_name
                port:
                  number: 3003

    - host: service_name.qubide.cloud # long running process (react, next) endpoint
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service_name
                port:
                  number: LANG_PORT  # e.g. replace with 3000 or your configured port

